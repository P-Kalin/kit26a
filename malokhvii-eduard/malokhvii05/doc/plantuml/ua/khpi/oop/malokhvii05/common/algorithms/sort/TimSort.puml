@startuml

    class TimSort<T> {
        {static} -DEFAULT_MERGE_BUFFER_SIZE: int
        {static} -DEFAULT_MIN_GALLOP: int
        {static} -DEFAULT_MIN_MERGE: int
        -array: T[]
        -mergeBuffer: T[]
        -minGallop: int
        -runBaseStack: int[]
        -runSizeStack: int[]
        -stackSize: int
        +TimSort(Comparator<T>)
        {static} -binaryInsertionSort(T[], int, int, int, Comparator<?>): void
        {static} -countRunAndMakeAscending(T[], int, int, Comparator<T>): int
        {static} -getMinRunSize(int): int
        {static} -leftGallopSearch(T[], T, int, int, int, Comparator<?>): int
        {static} -reverseSlice(Object[], int, int): void
        {static} -rightGallopSearch(T[], T, int, int, int, Comparator<?>): int
        -ensureMergeBufferCapacity(int): void
        -mergeAdjacentRuns(): void
        -mergeAllRuns(): void
        -mergeAtIndex(int): void
        -mergeHighRuns(int, int, int, int): void
        -mergeLowRuns(int, int, int, int): void
        -pushRun(int, int): void
        -setUnorderedArray(T[], int): void
        +sort(Array<T>): void
    }

@enduml
