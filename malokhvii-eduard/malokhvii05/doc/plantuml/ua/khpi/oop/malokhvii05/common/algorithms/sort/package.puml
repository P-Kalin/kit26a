@startuml

    namespace ua.khpi.oop.malokhvii05.common.algorithms.sort {

        class TopDownMergeSort<T> {
            +TopDownMergeSort(Comparator<T>)
            -mergeSlices(Object[], Object[]): Object[]
            -mergeSort(Object[]): Object[]
            +sort(T[], int): boolean
        }

        class TimSort<T> {
            {static} -DEFAULT_MERGE_BUFFER_SIZE: int
            {static} -DEFAULT_MIN_GALLOP: int
            {static} -DEFAULT_MIN_MERGE: int
            -array: T[]
            -mergeBuffer: T[]
            -minGallop: int
            -runBaseStack: int[]
            -runSizeStack: int[]
            -stackSize: int
            +TimSort(Comparator<T>)
            {static} -binaryInsertionSort(T[], int, int, int, Comparator<?>): void
            {static} -countRunAndMakeAscending(T[], int, int, Comparator<T>): int
            {static} -getMinRunSize(int): int
            {static} -leftGallopSearch(T[], T, int, int, int, Comparator<?>): int
            {static} -reverseSlice(Object[], int, int): void
            {static} -rightGallopSearch(T[], T, int, int, int, Comparator<?>): int
            -ensureMergeBufferCapacity(int): void
            -mergeAdjacentRuns(): void
            -mergeAllRuns(): void
            -mergeAtIndex(int): void
            -mergeHighRuns(int, int, int, int): void
            -mergeLowRuns(int, int, int, int): void
            -pushRun(int, int): void
            -setUnorderedArray(T[], int): void
            +sort(T[], int): boolean
        }

        class SortAlgorithmFactory {
            {static} -classMapping: Map<String, Class<?>>
            {static} -defaultAlgorithm: Class<?>
            -SortAlgorithmFactory()
            {static} +getAlgorithm(String): SortAlgorithm<T>
            {static} +getAlgorithm(String, Comparator<?>): SortAlgorithm<T>
            {static} +getDefaultAlgorithm(): SortAlgorithm<T>
            {static} +getDefaultAlgorithm(Comparator<?>): SortAlgorithm<T>
            {static} +getRegisteredAlgorithms(): Set<String>
            {static} -loadBasicAlgorithms(): void
            {static} +registerAlgorithm(String, Class<?>): void
            {static} +setDefaultAlgorithm(Class<?>): void
            {static} +unregisterAlgorithm(String): void
        }

        interface SortAlgorithm<T> {
            {abstract} +isReversedOrder(): boolean
            {abstract} +setReversedOrder(boolean): void
            {abstract} +sort(T[]): boolean
            {abstract} +sort(T[], int): boolean
        }

        class ShellSort<T> {
            +ShellSort(Comparator<T>)
            +sort(T[], int): boolean
        }

        class SelectionSort<T> {
            +SelectionSort(Comparator<T>)
            +sort(T[], int): boolean
        }

        class QuickSort<T> {
            +QuickSort(Comparator<T>)
            -partition(T[], int, int): int
            +sort(T[], int): boolean
        }

        class NullSortAlgorithm<T> {
            {static} +INSTANCE: SortAlgorithm
            -NullSortAlgorithm()
            +isReversedOrder(): boolean
            +setReversedOrder(boolean): void
            +sort(T[]): boolean
            +sort(T[], int): boolean
        }

        class JSort<T> {
            +JSort(Comparator<T>)
            -inverseReheap(T[], int): void
            -reheap(T[], int): void
            +sort(T[], int): boolean
        }

        class InsertionSort<T> {
            +InsertionSort(Comparator<T>)
            +sort(T[], int): boolean
        }

        class HeapSort<T> {
            +HeapSort(Comparator<T>)
            -heapify(T[], int, int): void
            +sort(T[], int): boolean
        }

        class GnomeSort<T> {
            +GnomeSort(Comparator<T>)
            +sort(T[], int): boolean
        }

        class BubbleSort<T> {
            +BubbleSort(Comparator<T>)
            +sort(T[], int): boolean
        }

        class BottomUpMergeSort<T> {
            +BottomUpMergeSort(Comparator<T>)
            -mergeSlice(Object[], Object[], int, int): void
            +sort(T[], int): boolean
        }

        abstract class AbstractSortAlgorithm<T> {
            #isReversedOrder: boolean
            +AbstractSortAlgorithm(Comparator<T>)
            {static} #checkArray(Object[]): boolean
            {static} #checkLength(Object[], int): boolean
            {static} #swap(T[], int, int): void
            +isNull(): boolean
            +isReversedOrder(): boolean
            +setReversedOrder(boolean): void
            +sort(T[]): boolean
        }

        AbstractSortAlgorithm <|-- TopDownMergeSort

        AbstractSortAlgorithm <|-- TimSort

        interface ua.khpi.oop.malokhvii05.common.algorithms.AlgorithmWithComparator<T> {
            {abstract} +getComparator(): Comparator<T>
            {abstract} +setComparator(Comparator<T>): void
        }
        ua.khpi.oop.malokhvii05.common.algorithms.AlgorithmWithComparator <|.. SortAlgorithm

        AbstractSortAlgorithm <|-- ShellSort

        AbstractSortAlgorithm <|-- SelectionSort

        AbstractSortAlgorithm <|-- QuickSort

        abstract class ua.khpi.oop.malokhvii05.common.algorithms.NullAlgorithmWithComparator<T>
        ua.khpi.oop.malokhvii05.common.algorithms.NullAlgorithmWithComparator <|-- NullSortAlgorithm

        SortAlgorithm <|.. NullSortAlgorithm

        AbstractSortAlgorithm <|-- JSort

        AbstractSortAlgorithm <|-- InsertionSort

        AbstractSortAlgorithm <|-- HeapSort

        AbstractSortAlgorithm <|-- GnomeSort

        AbstractSortAlgorithm <|-- BubbleSort

        AbstractSortAlgorithm <|-- BottomUpMergeSort

        abstract class ua.khpi.oop.malokhvii05.common.algorithms.AbstractAlgorithmWithComparator<T>
        ua.khpi.oop.malokhvii05.common.algorithms.AbstractAlgorithmWithComparator <|-- AbstractSortAlgorithm

        SortAlgorithm <|.. AbstractSortAlgorithm

    }

@enduml
