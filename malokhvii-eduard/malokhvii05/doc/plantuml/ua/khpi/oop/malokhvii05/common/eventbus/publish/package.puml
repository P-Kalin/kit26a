@startuml

    namespace ua.khpi.oop.malokhvii05.common.eventbus.publish {

        interface Publisher {
            {abstract} +publish(Object): void
            {abstract} +publishAll(Iterable<Object>): void
            {abstract} +subscribe(Object): void
            {abstract} +subscribeAll(Iterable<Object>): void
            {abstract} +unsubscribe(Object): void
            {abstract} +unsubscribeAll(Iterable<Object>): void
        }

        class EventBus {
            -cleanupAvailable: boolean
            -dispatcher: Dispatcher
            -exceptionHandler: SubscriberExceptionHandler
            -executor: Executor
            -subscribers: SubscriberRegistry
            +EventBus()
            +EventBus(Dispatcher)
            +EventBus(Dispatcher, Executor)
            +EventBus(Dispatcher, Executor, SubscriberExceptionHandler)
            +abortCleanup(): void
            +getDispatcher(): Dispatcher
            +getExecutor(): Executor
            +handleSubscriberException(Throwable, SubscriberExceptionContext): void
            +post(Object): void
            +register(Object): void
            +requestCleanup(): void
            +setDispatcher(Dispatcher): void
            +unregister(Object): void
        }

        class DeadEvent {
            -event: Object
            -eventBus: Object
            +DeadEvent(Object, Object)
            +getEvent(): Object
            +getEventBus(): Object
        }

        abstract class AbstractPublisher {
            #AbstractPublisher(EventBus)
            +publish(Object): void
            +publishAll(Iterable<Object>): void
            +subscribe(Object): void
            +subscribeAll(Iterable<Object>): void
            +unsubscribe(Object): void
            +unsubscribeAll(Iterable<Object>): void
        }

        Publisher <|.. AbstractPublisher

        AbstractPublisher --> EventBus: eventBus

    }

@enduml
